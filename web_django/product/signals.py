"""
DJANGO SIGNALS - Thay th·∫ø cho STORED PROCEDURE
T·ª± ƒë·ªông c·∫≠p nh·∫≠t t·ªìn kho khi c√≥ thay ƒë·ªïi ƒë∆°n h√†ng
"""
from django.db.models.signals import post_save, post_delete, pre_save
from django.dispatch import receiver
from order.models import OrderItem, Order
from product.models import ProductInventory
from django.db import transaction


@receiver(post_save, sender=OrderItem)
def reserve_inventory_on_add_to_cart(sender, instance, created, **kwargs):
    """
    TRIGGER: Khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
    ‚Üí T·ª± ƒë·ªông GI·ªÆ H√ÄNG (reserve) trong kho
    """
    if created and not instance.order.complete:
        try:
            inventory = ProductInventory.objects.get(
                product=instance.product,
                size=instance.size
            )
            inventory.reserve(instance.quantity)
            print(f"‚úÖ ƒê√£ gi·ªØ {instance.quantity} s·∫£n ph·∫©m {instance.product.name} size {instance.size}")
        except ProductInventory.DoesNotExist:
            print(f"‚ö†Ô∏è Ch∆∞a c√≥ t·ªìn kho cho {instance.product.name} size {instance.size}")
        except ValueError as e:
            print(f"‚ùå L·ªói gi·ªØ h√†ng: {e}")


@receiver(pre_save, sender=OrderItem)
def update_inventory_on_quantity_change(sender, instance, **kwargs):
    """
    TRIGGER: Khi thay ƒë·ªïi s·ªë l∆∞·ª£ng trong gi·ªè h√†ng
    ‚Üí T·ª± ƒë·ªông c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng gi·ªØ
    """
    if instance.pk and not instance.order.complete:
        try:
            old_instance = OrderItem.objects.get(pk=instance.pk)
            old_quantity = old_instance.quantity
            new_quantity = instance.quantity
            
            if old_quantity != new_quantity:
                inventory = ProductInventory.objects.get(
                    product=instance.product,
                    size=instance.size
                )
                
                difference = new_quantity - old_quantity
                
                if difference > 0:
                    # TƒÉng s·ªë l∆∞·ª£ng ‚Üí reserve th√™m
                    inventory.reserve(difference)
                    print(f"‚ûï TƒÉng gi·ªØ th√™m {difference} s·∫£n ph·∫©m")
                else:
                    # Gi·∫£m s·ªë l∆∞·ª£ng ‚Üí release b·ªõt
                    inventory.release(abs(difference))
                    print(f"‚ûñ Gi·∫£m gi·ªØ {abs(difference)} s·∫£n ph·∫©m")
                    
        except (OrderItem.DoesNotExist, ProductInventory.DoesNotExist):
            pass


@receiver(post_delete, sender=OrderItem)
def release_inventory_on_remove_from_cart(sender, instance, **kwargs):
    """
    TRIGGER: Khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    ‚Üí T·ª± ƒë·ªông TR·∫¢ H√ÄNG (release) v·ªÅ kho
    """
    if not instance.order.complete:
        try:
            inventory = ProductInventory.objects.get(
                product=instance.product,
                size=instance.size
            )
            inventory.release(instance.quantity)
            print(f"üîÑ ƒê√£ tr·∫£ {instance.quantity} s·∫£n ph·∫©m {instance.product.name} size {instance.size} v·ªÅ kho")
        except ProductInventory.DoesNotExist:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t·ªìn kho")


@receiver(post_save, sender=Order)
def complete_sale_on_order_complete(sender, instance, **kwargs):
    """
    TRIGGER: Khi ho√†n t·∫•t ƒë∆°n h√†ng (complete = True)
    ‚Üí Chuy·ªÉn t·ª´ RESERVED sang SOLD
    """
    if instance.complete:
        with transaction.atomic():
            for item in instance.orderitem_set.all():
                try:
                    inventory = ProductInventory.objects.select_for_update().get(
                        product=item.product,
                        size=item.size
                    )
                    inventory.complete_sale(item.quantity)
                    print(f"‚úÖ ƒê√£ b√°n {item.quantity} s·∫£n ph·∫©m {item.product.name} size {item.size}")
                except ProductInventory.DoesNotExist:
                    print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t·ªìn kho cho {item.product.name} size {item.size}")
                except ValueError as e:
                    print(f"‚ùå L·ªói ho√†n t·∫•t b√°n: {e}")
